Operating System
     - Functions
     - Comoponents 
          - Kernel
          - Shell 
          - File system 
    - Role of the components 

Linux File System
    - File structure 
    - Types of files 

Linux Commands and Scripting
    - Getting Help 
    - Basic Commands 
    - File Management commands 
    - globbing 
          -extended globbing
    - Absoulte path and Relative path
    - grep
    - Regex
        - Basic Regular expression 
        - Extended Regular Expression
        - Perl based Regular Expression 
    - Regex is used to 
       Find pattern  (grep)
       Extract fragments of some text
       Replace fragments of text with other text

     - Notation 
     Anchor
         ^ - The pattern starts with 
         $ - The pattern endswith 
         \<- The word starts with 
         \>- The word ends with 
     Alternative 
          | - Alternate 
     Groupinng 
         () - Grouping
      Match anything 
          . 
     Quantifiers - check for the previous occurance 
         {m} - exact match
         {m,n} - minimum to maximum
         {m,}  
         {,n}
         + 
         ? 
         * 
     Character class
         [:alpha:]	Any letter, [A-Za-z]
         [:upper:]	Any uppercase letter, [A-Z]
         [:lower:]	Any lowercase letter, [a-z]
         [:digit:]	Any digit, [0-9]
         [:alnum:]	Any alphanumeric character, [A-Za-z0-9]
         [:xdigit:]	Any hexadecimal digit, [0-9A-Fa-f]
         [:space:]	A tab, new line, vertical tab, form feed, carriage return, or space
         [:blank:]	A space or a tab.
         [:print:]	Any printable character
         [:punct:]	Any punctuation character: ! ' # S % & ' ( ) * + , - . / : ; < = > ? @ [ / ] ^ _ { | } ~
         [:graph:]	Any character defined as a printable character except those defined as part of the space character class
         [:word:]	Continuous string of alphanumeric characters and underscores.
         [:ascii:]	ASCII characters, in the range: 0-127
         [:cntrl:]	Any character not part of the character classes: [:upper:], [:lower:], [:alpha:], [:digit:], [:punct:], [:graph:], [:print:], [:xdigit:]

PCRE Notation 

          \n – Newline character
          \t – Tab character
          \s– Any whitespace character (including \t, \n and a few others)
          \S – Any non-whitespace character
          \w– Any word character (Uppercase and lowercase Latin alphabet, numbers 0-9, and _)
          \W– Any non-word character (the inverse of the \w token)
          \b– Word boundary: The boundaries between \w and \W, but matches in-between characters
           \B– Non-word boundary: The inverse of \b

   Globbing Vs Regular Expression 

    - pipe 
          | 

    - tee (Explore)
    - File operators 
         -r read
         -w write
         -x execute
         -e exists
         -f file 
         -d directory
       Explore
         -s size 
         -b block file 
         -c character file 
         -p pipe file
    - redirection 
        >
        >> 
        < 
        << 

    - Quotes 
       ' ' 
       "  "
       ` ` 
       \ 

    - sed 
        sed Vs grep
        How sed works 
        Options 
           -i 
           -e 
           -n 
           -r 

        commands 
           p
           d
           y
           s
           r
           g 
           G
           =

    - Scripting 
    - Advantage of scripting 
    - Constructs 
          - sequence 
                
          - conditional 
                if
                switch

          - looping

    - command line arguments 
          
    - Power Tools 
        grep 
        sed 
        sort 
        uniq
        head 
        tail 
        cut 
        tr 
        wc 
        cat 


    - awk 
          pattern block 
                / / 
                &&
                !
                 ||
          action block 
               sequence 
               conditional statements 
               looping statements 
          begin block 
          end block 

          Build in variables 
              NR
              NF 
              FS 
              OFS 
              RS 
              ORS 
              FILENAME 

     /dev/null 
     tee utility 
     Explore 
     diff, cmp, comm  commands 

     Process 
       - Program 
       - Process
       - Types of process 
       - Process States 
       - signals
       - Jobs 
       - Schedule 
       - Thread 

     commands 
           ps
           pstree
           top 
           Explore: htop , atop
           pgrep

           ls /proc
           pidof

           --------------------------
           To control the process 
           --------------------------
           fg
           bg
           disown 
           nohup

           ---------------------------
           To List Jobs
           ----------------------------
           jobs

           ------------ 
           To Schedule 
           -------------
           at 
           cron 
           systemd.timer

           ------------------
           To pass signals 
           ------------------
           kill 
           killall 

            IPCommunication 
               Different IPC comminication
               compare 
               Advantage disadvantage b/w differnt IPC 
               when to use which IPC 

          Process States 

          Applications of Scripting in Cybersecurity  
          Linux booting process*
             identify key stages where an attacker might attempt to gain unauthorized access. 
             How can these vulnerabilities be mitigated?

          Explain the significance of the Zombie and Orphan process states in Linux. How do these states affect system performance and resource management?  Explain how to create Zombie and Orphan process with an example.

          #include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t child_pid;

    child_pid = fork(); // Create a child process

    if (child_pid < 0) {
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (child_pid == 0) {
        // Child process
        printf("Child process executing\n");
        exit(0);
    } else {
        // Parent process
        sleep(2); // Parent process waits for 2 seconds

        // The parent process does not handle the termination of the child process
        // It does not invoke wait() or waitpid() to collect the exit status

        printf("Parent process executing\n");
        printf("Zombie process created\n");
    }

    return 0;
}






// A C program to demonstrate Orphan Process.  
// Parent process finishes execution while the 
// child process is running. The child process 
// becomes orphan. 
#include<stdio.h> 
#include <sys/types.h> 
#include <unistd.h> 
  
int main() 
{ 
    // Create a child process       
    int pid = fork(); 
  
    if (pid > 0) 
        printf("in parent process"); 
  
    // Note that pid is 0 in child process 
    // and negative if fork() fails 
    else if (pid == 0) 
    { 
        sleep(30); 
        printf("in child process"); 
    } 
  
    return 0; 

    Explain the importance of operating systems in cybersecurity. Discuss how an OS can both enhance and hinder security, providing examples of common OS vulnerabilities that attackers may exploit.

    Compare Pre-emptive Scheduling and Non-Pre-emptive scheduling with respect to the following points 

          PCB


          
